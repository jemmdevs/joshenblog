---
import type { CollectionEntry } from 'astro:content';

interface Props {
  posts: CollectionEntry<'blog'>[];
}

const { posts } = Astro.props;

// Renderizar el contenido de cada post para búsqueda
const postsWithContent = await Promise.all(
  posts.map(async (post, index) => {
    const { Content } = await post.render();
    return {
      slug: post.slug,
      title: post.data.title,
      description: post.data.description,
      author: post.data.author,
      number: index + 1
    };
  })
);
---

<div class="search-container mb-12">
  <div class="relative">
    <input
      type="text"
      id="search-input"
      placeholder="Search posts by title or content..."
      class="w-full px-6 py-4 text-lg border-2 border-gray-300 rounded-lg focus:outline-none focus:border-black transition-colors font-pixel placeholder:text-gray-400"
    />
    <div class="absolute right-4 top-1/2 -translate-y-1/2 pointer-events-none">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
      </svg>
    </div>
  </div>
  
  <div id="search-results-count" class="mt-3 text-sm text-gray-600 font-pixel"></div>
</div>

<script>
  import Fuse from 'fuse.js';

  // Esperar a que el DOM esté completamente cargado
  document.addEventListener('DOMContentLoaded', () => {
    const searchInput = document.getElementById('search-input');
    const searchResultsCount = document.getElementById('search-results-count');
    const postsGrid = document.querySelector('.grid.grid-cols-1');
    
    if (!searchInput || !searchResultsCount || !postsGrid) {
      console.error('Search elements not found');
      return;
    }

    const allPostCards = Array.from(postsGrid.querySelectorAll('article'));
    
    // Extraer datos de búsqueda directamente del DOM
    const searchablePosts = allPostCards.map((card) => {
      const titleElement = card.querySelector('h2');
      const linkElement = card.querySelector('a');
      const authorElement = card.querySelector('time').parentElement.querySelector('span');
      
      const href = linkElement?.getAttribute('href') || '';
      const slug = href.replace('/blog/', '');
      
      return {
        slug: slug,
        title: titleElement?.textContent?.trim() || '',
        author: authorElement?.textContent?.trim() || '',
        element: card
      };
    });

    // Configuración de Fuse.js para búsqueda fuzzy
    const fuseOptions = {
      keys: [
        { name: 'title', weight: 2 },
        { name: 'author', weight: 0.5 }
      ],
      threshold: 0.4,
      distance: 100,
      minMatchCharLength: 2,
      includeScore: true,
      ignoreLocation: true
    };

    const fuse = new Fuse(searchablePosts, fuseOptions);

    function performSearch(query) {
      if (!query || query.trim() === '') {
        // Si no hay búsqueda, mostrar todos los posts
        allPostCards.forEach(card => {
          card.style.display = 'block';
        });
        searchResultsCount.textContent = '';
        return;
      }

      // Realizar la búsqueda con Fuse.js
      const results = fuse.search(query);
      const matchingSlugs = new Set(results.map(result => result.item.slug));

      // Ocultar/mostrar posts según los resultados
      let visibleCount = 0;
      searchablePosts.forEach(post => {
        if (matchingSlugs.has(post.slug)) {
          post.element.style.display = 'block';
          visibleCount++;
        } else {
          post.element.style.display = 'none';
        }
      });

      // Actualizar contador de resultados
      if (visibleCount === 0) {
        searchResultsCount.textContent = 'No posts found matching your search.';
        searchResultsCount.classList.add('text-red-500');
        searchResultsCount.classList.remove('text-gray-600');
      } else if (visibleCount === searchablePosts.length) {
        searchResultsCount.textContent = `Showing all ${visibleCount} posts`;
        searchResultsCount.classList.remove('text-red-500');
        searchResultsCount.classList.add('text-gray-600');
      } else {
        searchResultsCount.textContent = `Found ${visibleCount} ${visibleCount === 1 ? 'post' : 'posts'}`;
        searchResultsCount.classList.remove('text-red-500');
        searchResultsCount.classList.add('text-gray-600');
      }
    }

    // Búsqueda en tiempo real con debounce
    let debounceTimer;
    searchInput.addEventListener('input', (e) => {
      clearTimeout(debounceTimer);
      debounceTimer = setTimeout(() => {
        performSearch(e.target.value);
      }, 300);
    });

    // Limpiar búsqueda al presionar Escape
    searchInput.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        searchInput.value = '';
        performSearch('');
        searchInput.blur();
      }
    });
  });
</script>

<style>
  .search-container {
    animation: fadeIn 0.5s ease-in;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(-10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  #search-input:focus {
    box-shadow: 0 0 0 3px rgba(0, 0, 0, 0.1);
  }
</style>

